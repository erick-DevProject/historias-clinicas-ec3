

-- Archivo: java\com\historias\clinicas\HistoriasClinicasApplication.java 
package com.historias.clinicas;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;

@SpringBootApplication
public class HistoriasClinicasApplication extends SpringBootServletInitializer {
    public static void main(String[] args) {
        SpringApplication.run(HistoriasClinicasApplication.class, args);
    }
}


-- Archivo: java\com\historias\clinicas\ServletInitializer.java 
package com.historias.clinicas;

import org.springframework.boot.builder.SpringApplicationBuilder;
import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;

public class ServletInitializer extends SpringBootServletInitializer {
  @Override
  protected SpringApplicationBuilder configure(SpringApplicationBuilder app) {
    return app.sources(HistoriasClinicasApplication.class);
  }
}


-- Archivo: java\com\historias\clinicas\config\Conexion.java 
package com.historias.clinicas.config;

import javax.sql.DataSource;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import com.zaxxer.hikari.*;

@Configuration
public class Conexion {

    @Value("${spring.datasource.url}")      private String url;
    @Value("${spring.datasource.username}") private String user;
    @Value("${spring.datasource.password}") private String pass;

    @Bean
    public DataSource dataSource() {
        HikariConfig cfg = new HikariConfig();
        cfg.setJdbcUrl(url);
        cfg.setUsername(user);
        cfg.setPassword(pass);
        cfg.setMaximumPoolSize(10);
        return new HikariDataSource(cfg);
    }
}


-- Archivo: java\com\historias\clinicas\config\DataInitializer.java 
package com.historias.clinicas.config;

import com.historias.clinicas.entity.*;
import com.historias.clinicas.entity.enums.*;
import com.historias.clinicas.repositories.*;
import org.mindrot.jbcrypt.BCrypt;
import org.springframework.boot.CommandLineRunner;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class DataInitializer {

    private String hash(String raw){ return BCrypt.hashpw(raw, BCrypt.gensalt()); }

    @Bean
    CommandLineRunner init(UserRepository userRepo,
                           AdminRepository adminRepo,
                           ProfessionalRepository proRepo,
                           PatientRepository patientRepo){

        return args -> {
            if(userRepo.count()==0){

                /* --- Admin --- */
                UserEntity admin = userRepo.save(
                    new UserEntity("admin", hash("admin123"),
                                   "Ada","Admin", Sex.F,null,
                                   "0","a@demo"));
                adminRepo.save(new Admin(admin,true));

                /* --- Professional --- */
                UserEntity pro = userRepo.save(
                    new UserEntity("pro1", hash("pro123"),
                                   "Pedro","Pro", Sex.M,null,
                                   "1","p@demo"));
                proRepo.save(new Professional(pro,
                               com.historias.clinicas.entity.enums.ProfType.MEDICO,
                               "CMP12345","Medicina General"));

                /* --- Patient --- */
                UserEntity pac = userRepo.save(
                    new UserEntity("pac1", hash("pac123"),
                                   "Paz","Pac", Sex.F,null,
                                   "2","c@demo"));
                patientRepo.save(new Patient(pac,
                               com.historias.clinicas.entity.enums.DocType.DNI,
                               "87654321","Av. Siempre Viva 123"));

                System.out.println("### Usuarios iniciales insertados ###");
            }
        };
    }
}


-- Archivo: java\com\historias\clinicas\config\WebConfig.java 
package com.historias.clinicas.config;

import com.historias.clinicas.security.AuthInterceptor;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.*;

@Configuration
public class WebConfig implements WebMvcConfigurer {

  @Override
  public void addInterceptors(InterceptorRegistry registry) {
    registry.addInterceptor(new AuthInterceptor());
  }

  @Override
  public void addResourceHandlers(ResourceHandlerRegistry reg) {
    reg.addResourceHandler("/css/**")
       .addResourceLocations("classpath:/static/css/");
    reg.addResourceHandler("/js/**")
       .addResourceLocations("classpath:/static/js/");
    reg.addResourceHandler("/images/**")
       .addResourceLocations("classpath:/static/images/");
  }
}


-- Archivo: java\com\historias\clinicas\controllers\AdminPanelController.java 
/* ---------------------------------------------------------------------------
 *  src/main/java/com/historias/clinicas/controllers/AdminPanelController.java
 * --------------------------------------------------------------------------- */
package com.historias.clinicas.controllers;

import com.historias.clinicas.entity.UserEntity;
import com.historias.clinicas.entity.enums.*;
import com.historias.clinicas.repositories.*;
import jakarta.servlet.http.HttpSession;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;

/**
 * Control panel for ADMIN users, managing professionals, administrators, and profile.
 */
@Controller
@RequestMapping("/admin")
public class AdminPanelController {

    private final UserRepository        userRepo;
    private final ProfessionalRepository profRepo;
    private final AdminRepository        adminRepo;

    public AdminPanelController(UserRepository  userRepo,
                                ProfessionalRepository profRepo,
                                AdminRepository adminRepo) {
        this.userRepo  = userRepo;
        this.profRepo  = profRepo;
        this.adminRepo = adminRepo;
    }

    /* ---------------------------------------------------------------
     * DATOS DE LAYOUT (rol para el sidebar)
     * --------------------------------------------------------------- */
    @ModelAttribute
    public void populateRole(Model model, HttpSession session) {
        UserEntity user = (UserEntity) session.getAttribute("USER");
        Role role       = (Role)       session.getAttribute("ROLE");

        boolean isPrimary = user != null
                && adminRepo.existsByUserIdAndPrimaryAdminTrue(user.getUserId());

        String roleStr = (role == Role.ADMIN && isPrimary)
                ? "ADMIN_PRIMARY"
                : (role != null ? role.name() : "");

        model.addAttribute("role", roleStr);
    }

    /* ===============================================================
     * ===  PROFESIONALES  (cualquier admin)                       ===
     * =============================================================== */

    @GetMapping("/professionals")
    public String listProfessionals(Model m) {
        m.addAttribute("pros", profRepo.findAll());
        return "admin/professionals";
    }

    @GetMapping("/professionals/new")
    public String newProfessionalForm(Model m) {
        m.addAttribute("profTypes",  ProfType.values());
        m.addAttribute("sexValues",  Sex.values());
        return "admin/professional-form";
    }

    @PostMapping("/professionals")
    public String createProfessional(
            @RequestParam String username,
            @RequestParam String password,
            @RequestParam String firstName,
            @RequestParam String lastName,
            @RequestParam Sex   sex,
            @RequestParam(required = false) String phone,
            @RequestParam(required = false) String email,
            @RequestParam ProfType profType,
            @RequestParam String licenseNumber,
            @RequestParam(required = false) String specialty,
            Model model) {

        if (userRepo.findByUsername(username).isPresent()) {
            model.addAttribute("error", "Usuario ya existe");
            model.addAttribute("sexValues", Sex.values());
            model.addAttribute("profTypes", ProfType.values());
            return "admin/professional-form";
        }

        UserEntity u = new UserEntity(
                username,
                com.historias.clinicas.general.PasswordUtil.hash(password),
                firstName, lastName, sex, null, phone, email);
        userRepo.save(u);

        profRepo.save(new com.historias.clinicas.entity.Professional(
                u, profType, licenseNumber, specialty));

        return "redirect:/admin/professionals";
    }

    /* ---------- ELIMINAR PROFESIONAL + USUARIO ------------------- */
    @Transactional
    @PostMapping("/professionals/{id}/delete")
    public String deleteProfessional(@PathVariable Integer id) {
        /* 1) quitar registro PROFESSIONAL  2) quitar registro USER  */
        profRepo.deleteById(id);
        userRepo.deleteById(id);
        return "redirect:/admin/professionals";
    }

    /* ===============================================================
     * ===  ADMINISTRADORES  (solo admin primario)                 ===
     * =============================================================== */

    @GetMapping("/admins")
    public String listAdmins(HttpSession s, Model m) {
        if (!isPrimary(s)) return "redirect:/admin/dashboard";
        m.addAttribute("admins", adminRepo.findAll());
        return "admin/admins";
    }

    @GetMapping("/admins/new")
    public String newAdminForm(HttpSession s, Model m) {
        if (!isPrimary(s)) return "redirect:/admin/dashboard";
        m.addAttribute("sexValues", Sex.values());
        return "admin/admin-form";
    }

    @PostMapping("/admins")
    public String createAdmin(
            HttpSession s,
            @RequestParam String username,
            @RequestParam String password,
            @RequestParam String firstName,
            @RequestParam String lastName,
            @RequestParam Sex   sex,
            Model model) {

        if (!isPrimary(s)) return "redirect:/admin/dashboard";

        if (userRepo.findByUsername(username).isPresent()) {
            model.addAttribute("error", "Usuario ya existe");
            model.addAttribute("sexValues", Sex.values());
            return "admin/admin-form";
        }

        UserEntity u = new UserEntity(
                username,
                com.historias.clinicas.general.PasswordUtil.hash(password),
                firstName, lastName, sex, null, null, null);
        userRepo.save(u);

        adminRepo.save(new com.historias.clinicas.entity.Admin(u, false));
        return "redirect:/admin/admins";
    }

    /* ---------- ELIMINAR ADMIN + USUARIO ------------------------- */
    @Transactional
    @PostMapping("/admins/{id}/delete")
    public String deleteAdmin(HttpSession s, @PathVariable Integer id) {
        if (!isPrimary(s)) return "redirect:/admin/dashboard";

        UserEntity current = (UserEntity) s.getAttribute("USER");
        if (id.equals(current.getUserId())) {              // evita suicidio
            return "redirect:/admin/admins?error=self";
        }

        adminRepo.deleteById(id);  // 1) tabla admin
        userRepo.deleteById(id);   // 2) tabla users
        return "redirect:/admin/admins";
    }

    /* =============================================================== */
    /* ===  PERFIL PROPIO                                           === */
    /* =============================================================== */

    @GetMapping("/profile/edit")
    public String editProfileForm(HttpSession s, Model m) {
        UserEntity cur = (UserEntity) s.getAttribute("USER");
        Optional<UserEntity> opt = userRepo.findById(cur.getUserId());
        m.addAttribute("user", opt.orElse(cur));
        return "admin/profile_form";
    }

    @PostMapping("/profile/edit")
    public String updateProfile(HttpSession s,
                                @RequestParam String firstName,
                                @RequestParam String lastName,
                                @RequestParam(required = false) String phone,
                                @RequestParam(required = false) String email,
                                @RequestParam(required = false) String password) {

        UserEntity cur = (UserEntity) s.getAttribute("USER");
        userRepo.findById(cur.getUserId()).ifPresent(u -> {
            u.setFirstName(firstName);
            u.setLastName(lastName);
            u.setPhone(phone);
            u.setEmail(email);
            if (password != null && !password.isBlank()) {
                u.setHashPassword(com.historias.clinicas.general.PasswordUtil.hash(password));
            }
            userRepo.save(u);
            s.setAttribute("USER", u);
        });
        return "redirect:/admin/dashboard";
    }

    /* -------------------------------------------------------------- */
    private boolean isPrimary(HttpSession session) {
        UserEntity user = (UserEntity) session.getAttribute("USER");
        return user != null && adminRepo.existsByUserIdAndPrimaryAdminTrue(user.getUserId());
    }
}


-- Archivo: java\com\historias\clinicas\controllers\AuthController.java 
package com.historias.clinicas.controllers;

import com.historias.clinicas.dao.UserDao;
import com.historias.clinicas.entity.UserEntity;
import com.historias.clinicas.entity.enums.Role;
import com.historias.clinicas.general.PasswordUtil;
import com.historias.clinicas.repositories.*;
import jakarta.servlet.http.HttpSession;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

/**
 * Controla el flujo de login/logout y coloca en sesión los atributos
 * USER y ROLE.  Usa PasswordUtil para verificar las credenciales.
 */
@Controller
public class AuthController {

    private final UserDao                 userDao;
    private final AdminRepository         adminRepo;
    private final ProfessionalRepository  proRepo;
    private final PatientRepository       patientRepo;

    public AuthController(UserDao userDao,
                          AdminRepository adminRepo,
                          ProfessionalRepository proRepo,
                          PatientRepository patientRepo) {
        this.userDao    = userDao;
        this.adminRepo  = adminRepo;
        this.proRepo    = proRepo;
        this.patientRepo= patientRepo;
    }

    /* ---------------------------------------------------------------
     * FORMULARIO DE LOGIN
     * --------------------------------------------------------------- */
    @GetMapping("/login")
    public String form(@RequestParam(required = false) String error,
                       @RequestParam(required = false) String timeout,
                       Model model) {
        if (error   != null) model.addAttribute("msg", "Credenciales inválidas");
        if (timeout != null) model.addAttribute("msg", "Sesión finalizada");
        return "login";
    }

    /* ---------------------------------------------------------------
     * PROCESO DE LOGIN
     * --------------------------------------------------------------- */
    @PostMapping("/login")
    public String doLogin(@RequestParam String username,
                          @RequestParam String password,
                          HttpSession session) {

        UserEntity u = userDao.findByUsername(username).orElse(null);

        // --- verificación de contraseña con PasswordUtil ---
        if (u == null || !PasswordUtil.verify(password, u.getHashPassword()))
            return "redirect:/login?error";

        /* -------- determinar rol -------- */
        Role role;
        Integer id = u.getUserId();
        if      (adminRepo.existsById(id)) role = Role.ADMIN;
        else if (proRepo.existsById(id))   role = Role.PROFESSIONAL;
        else                               role = Role.PATIENT;

        session.setAttribute("USER", u);
        session.setAttribute("ROLE", role);

        return switch (role) {
            case ADMIN        -> "redirect:/admin/dashboard";
            case PROFESSIONAL -> "redirect:/professional/dashboard";
            case PATIENT      -> "redirect:/patient/dashboard";
        };
    }

    /* ---------------------------------------------------------------
     * LOGOUT
     * --------------------------------------------------------------- */
    @GetMapping("/logout")
    public String logout(HttpSession s) {
        s.invalidate();
        return "redirect:/login?timeout";
    }
}


-- Archivo: java\com\historias\clinicas\controllers\DashboardController.java 
package com.historias.clinicas.controllers;

import com.historias.clinicas.entity.UserEntity;
import com.historias.clinicas.entity.enums.Role;
import com.historias.clinicas.repositories.AdminRepository;
import com.historias.clinicas.repositories.ProfessionalRepository;
import com.historias.clinicas.repositories.PatientRepository;
import com.historias.clinicas.repositories.EpisodeRepository;
import jakarta.servlet.http.HttpSession;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class DashboardController {

    private final AdminRepository adminRepo;
    private final ProfessionalRepository profRepo;
    private final PatientRepository patientRepo;
    private final EpisodeRepository epiRepo;

    public DashboardController(AdminRepository adminRepo,
                               ProfessionalRepository profRepo,
                               PatientRepository patientRepo,
                               EpisodeRepository epiRepo) {
        this.adminRepo   = adminRepo;
        this.profRepo    = profRepo;
        this.patientRepo = patientRepo;
        this.epiRepo     = epiRepo;
    }

    @GetMapping({"/admin/dashboard","/professional/dashboard","/patient/dashboard"})
    public String dash(HttpSession sess, Model model){
        UserEntity u = (UserEntity) sess.getAttribute("USER");
        Role r       = (Role)       sess.getAttribute("ROLE");
        if(u==null || r==null) return "redirect:/login";

        boolean isPrimary = adminRepo.existsByUserIdAndPrimaryAdminTrue(u.getUserId());
        String roleStr = (r==Role.ADMIN && isPrimary) ? "ADMIN_PRIMARY" : r.name();

        model.addAttribute("user", u);
        model.addAttribute("role", roleStr);

        // Métricas solo para ADMIN
        if(r == Role.ADMIN){
            model.addAttribute("prosCount",     profRepo.count());
            model.addAttribute("patientsCount", patientRepo.count());
            model.addAttribute("openEpisodes",  epiRepo.countByDateOutIsNull());
        }

        // Métricas para PROFESIONAL
        if(r == Role.PROFESSIONAL){
            model.addAttribute("patientsCount", patientRepo.count());
            long activeEpisodes = epiRepo.findByProfessionalUserUserIdAndDateOutIsNull(u.getUserId()).size();
            model.addAttribute("activeEpisodes", activeEpisodes);
        }

        return switch(r){
            case ADMIN        -> "admin/dashboard";
            case PROFESSIONAL -> "professional/dashboard";
            case PATIENT      -> "patient/dashboard";
        };
    }
}


-- Archivo: java\com\historias\clinicas\controllers\HomeController.java 
package com.historias.clinicas.controllers;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class HomeController {
  @GetMapping("/")
  public String home(Model m) {
    m.addAttribute("mensaje","¡Bienvenido a Historias Clínicas!");
    return "index";
  }
}


-- Archivo: java\com\historias\clinicas\controllers\ProfessionalMedicationController.java 
package com.historias.clinicas.controllers;

import com.historias.clinicas.entity.Medication;
import com.historias.clinicas.entity.Prescription;
import com.historias.clinicas.entity.Episode;
import com.historias.clinicas.repositories.MedicationRepository;
import com.historias.clinicas.repositories.PrescriptionRepository;
import com.historias.clinicas.repositories.EpisodeRepository;
import jakarta.servlet.http.HttpSession;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;
import java.util.List;

@Controller
@RequestMapping("/professional/medications")
public class ProfessionalMedicationController {

    private final MedicationRepository medRepo;
    private final PrescriptionRepository prescRepo;
    private final EpisodeRepository epiRepo;

    public ProfessionalMedicationController(MedicationRepository medRepo,
                                            PrescriptionRepository prescRepo,
                                            EpisodeRepository epiRepo) {
        this.medRepo   = medRepo;
        this.prescRepo = prescRepo;
        this.epiRepo   = epiRepo;
    }

    /** Listar todas las medicaciones disponibles. */
    @GetMapping
    public String listMedications(Model model) {
        model.addAttribute("medications", medRepo.findAll());
        return "medications/list";
    }

    /** Formulario nuevo medicamento (integrado en sidebar). */
    @GetMapping("/new")
    public String newMedicationForm(Model model) {
        model.addAttribute("medication", new Medication());
        return "medications/form";
    }

    /** Alta de medicamento. */
    @PostMapping
    public String createMedication(@ModelAttribute Medication medication) {
        medRepo.save(medication);
        return "redirect:/professional/medications";
    }

    /** Formulario edición medicamento. */
    @GetMapping("/{id}/edit")
    public String editMedicationForm(@PathVariable Integer id, Model model) {
        Medication medication = medRepo.findById(id)
            .orElseThrow(() -> new IllegalArgumentException("Medicamento no encontrado: " + id));
        model.addAttribute("medication", medication);
        return "medications/form";
    }

    /** Procesar edición de medicamento. */
    @PostMapping("/{id}/edit")
    public String updateMedication(@PathVariable Integer id,
                                   @ModelAttribute Medication med) {
        Medication existing = medRepo.findById(id)
            .orElseThrow(() -> new IllegalArgumentException("Medicamento no encontrado: " + id));
        existing.setName(med.getName());
        existing.setForm(med.getForm());
        existing.setConcentration(med.getConcentration());
        medRepo.save(existing);
        return "redirect:/professional/medications";
    }
    
    @PostMapping("/{id}/delete")
    public String deleteMedication(@PathVariable Integer id) {
        medRepo.deleteById(id);
        return "redirect:/professional/medications";
    }

    /* — Prescripción existente, no toca — */
    @GetMapping("/prescribe")
    public String prescribeForm(Model model, HttpSession session) {
        Integer profId = getCurrentProfId(session);
        List<Episode> openEpisodes =
            epiRepo.findByProfessionalUserUserIdAndDateOutIsNull(profId);

        model.addAttribute("episodes",    openEpisodes);
        model.addAttribute("medications", medRepo.findAll());
        model.addAttribute("routes",      Prescription.Route.values());
        return "medications/prescribe";
    }
    @PostMapping("/prescribe")
    public String prescribe(
            @RequestParam("episodeId")    Integer episodeId,
            @RequestParam("medicationId") Integer medicationId,
            @RequestParam String dose,
            @RequestParam Prescription.Route route,
            @RequestParam(required = false) String frequency) {

        Episode     episode    = epiRepo.findById(episodeId)
            .orElseThrow(() -> new IllegalArgumentException(
                "Episodio no encontrado: " + episodeId));
        Medication  medication = medRepo.findById(medicationId)
            .orElseThrow(() -> new IllegalArgumentException(
                "Medicamento no encontrado: " + medicationId));

        prescRepo.save(new Prescription() {{
            setEpisode(episode);
            setMedication(medication);
            setDose(dose);
            setRoute(route);
            setFrequency(frequency);
            setStartDt(LocalDateTime.now());
        }});
        return "redirect:/professional/medications";
    }

    private Integer getCurrentProfId(HttpSession session) {
        return ((com.historias.clinicas.entity.UserEntity)
               session.getAttribute("USER")).getUserId();
    }
}


-- Archivo: java\com\historias\clinicas\controllers\ProfessionalPatientController.java 
package com.historias.clinicas.controllers;

import com.historias.clinicas.entity.Patient;
import com.historias.clinicas.entity.UserEntity;
import com.historias.clinicas.entity.enums.DocType;
import com.historias.clinicas.general.PasswordUtil;
import com.historias.clinicas.repositories.PatientRepository;
import com.historias.clinicas.repositories.UserRepository;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.util.List;

/**
 * ABM de pacientes para el profesional que ha iniciado sesión.
 */
@Controller
@RequestMapping("/professional/patients")
public class ProfessionalPatientController {

    private final PatientRepository patientRepo;
    private final UserRepository    userRepo;

    public ProfessionalPatientController(PatientRepository patientRepo,
                                         UserRepository userRepo) {
        this.patientRepo = patientRepo;
        this.userRepo    = userRepo;
    }

    /* ------------------------------------------------------------------
     * LISTADO
     * ------------------------------------------------------------------ */
    @GetMapping
    public String list(Model model) {
        model.addAttribute("patients", patientRepo.findAll());
        return "professional/patients";             // ← vista patients.html
    }

    /* ------------------------------------------------------------------
     * FORMULARIO NUEVO
     * ------------------------------------------------------------------ */
    @GetMapping("/new")
    public String form(Model model) {
        Patient p = new Patient();
        p.setUser(new UserEntity());                // evita NPE al bindear
        model.addAttribute("patient",  p);
        model.addAttribute("docTypes", DocType.values());
        return "professional/patient-form";         // ← vista patient-form.html
    }

    /* ------------------------------------------------------------------
     * ALTA
     * ------------------------------------------------------------------ */
    @PostMapping
    public String create(@RequestParam String username,
                         @RequestParam String password,
                         @RequestParam DocType docType,
                         @RequestParam String docNumber,
                         @RequestParam String firstName,
                         @RequestParam String lastName,
                         @RequestParam(required = false) String address,
                         Model model) {

        if (userRepo.findByUsername(username).isPresent()) {
            model.addAttribute("error", "El usuario ya existe");
            Patient p = new Patient();
            p.setUser(new UserEntity());
            model.addAttribute("patient",  p);
            model.addAttribute("docTypes", DocType.values());
            return "professional/patient-form";
        }

        UserEntity u = new UserEntity();
        u.setUsername(username);
        u.setHashPassword(PasswordUtil.hash(password));
        u.setFirstName(firstName);
        u.setLastName(lastName);
        userRepo.save(u);

        Patient patient = new Patient(u, docType, docNumber, address);
        patientRepo.save(patient);

        return "redirect:/professional/dashboard";
    }

    /* ------------------------------------------------------------------
     * FORMULARIO EDICIÓN
     * ------------------------------------------------------------------ */
    @GetMapping("/{id}/edit")
    public String edit(@PathVariable Integer id, Model model) {
        Patient p = patientRepo.findById(id)
            .orElseThrow(() -> new IllegalArgumentException(
                "Paciente no encontrado: " + id));
        model.addAttribute("patient",  p);
        model.addAttribute("docTypes", DocType.values());
        return "professional/patient-form";
    }

    /* ------------------------------------------------------------------
     * ACTUALIZACIÓN
     * ------------------------------------------------------------------ */
    @PostMapping("/{id}/edit")
    public String update(@PathVariable Integer id,
                         @RequestParam DocType docType,
                         @RequestParam String docNumber,
                         @RequestParam String firstName,
                         @RequestParam String lastName,
                         @RequestParam(required = false) String address) {

        Patient p = patientRepo.findById(id)
            .orElseThrow(() -> new IllegalArgumentException(
                "Paciente no encontrado: " + id));
        UserEntity u = p.getUser();

        u.setFirstName(firstName);
        u.setLastName(lastName);
        userRepo.save(u);

        p.setDocType(docType);
        p.setDocNumber(docNumber);
        p.setAddress(address);
        patientRepo.save(p);

        return "redirect:/professional/patients";
    }

    /* ------------------------------------------------------------------
     * BAJA
     * ------------------------------------------------------------------ */
    @PostMapping("/{id}/delete")
    public String delete(@PathVariable Integer id) {
        patientRepo.deleteById(id);
        return "redirect:/professional/patients";
    }
}


-- Archivo: java\com\historias\clinicas\controllers\ProfileController.java 
package com.historias.clinicas.controllers;

import com.historias.clinicas.entity.UserEntity;
import com.historias.clinicas.entity.enums.Role;
import com.historias.clinicas.general.PasswordUtil;
import com.historias.clinicas.repositories.AdminRepository;
import com.historias.clinicas.repositories.UserRepository;
import jakarta.servlet.http.HttpSession;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;

/**
 * Controller to allow any authenticated user (admin, professional or patient)
 * to edit their own profile.
 */
@Controller
@RequestMapping("/profile")
public class ProfileController {

    private final UserRepository userRepo;
    private final AdminRepository adminRepo;

    public ProfileController(UserRepository userRepo, AdminRepository adminRepo) {
        this.userRepo = userRepo;
        this.adminRepo = adminRepo;
    }

    /**
     * Adds layout variables for the shared user_layout.
     */
    @ModelAttribute
    public void addLayoutAttributes(Model model, HttpSession session) {
        UserEntity user = (UserEntity) session.getAttribute("USER");
        Role role = (Role) session.getAttribute("ROLE");
        String rolePath = (role != null) ? role.name().toLowerCase() : "";
        model.addAttribute("pageTitle", "Perfil · Historias Clínicas");
        model.addAttribute("appTitle", "Historias Clínicas");
        model.addAttribute("homePath", rolePath + "/dashboard");
        model.addAttribute("profileEditPath", "profile/edit");
    }

    /**
     * Exposes the current user in the model for form binding.
     */
    @ModelAttribute("user")
    public UserEntity currentUser(HttpSession session) {
        return (UserEntity) session.getAttribute("USER");
    }

    /**
     * Shows the edit form for the current user's profile.
     */
    @GetMapping("/edit")
    public String showEditForm(HttpSession session) {
        Role role = (Role) session.getAttribute("ROLE");
        if (role == Role.ADMIN) {
            return "admin/profile_form";
        } else if (role == Role.PROFESSIONAL) {
            return "professional/profile_form";
        } else {
            return "patient/profile_form";
        }
    }

    /**
     * Processes updates to the user's profile.
     */
    @PostMapping("/edit")
    public String updateProfile(HttpSession session,
                                @RequestParam String firstName,
                                @RequestParam String lastName,
                                @RequestParam(required = false) String phone,
                                @RequestParam(required = false) String email,
                                @RequestParam(required = false) String password) {
        UserEntity current = (UserEntity) session.getAttribute("USER");
        Optional<UserEntity> opt = userRepo.findById(current.getUserId());
        if (opt.isPresent()) {
            UserEntity user = opt.get();
            user.setFirstName(firstName);
            user.setLastName(lastName);
            user.setPhone(phone);
            user.setEmail(email);
            if (password != null && !password.isBlank()) {
                user.setHashPassword(PasswordUtil.hash(password));
            }
            userRepo.save(user);
            session.setAttribute("USER", user);
        }
        // redirect back to the dashboard
        Role role = (Role) session.getAttribute("ROLE");
        if (role == Role.ADMIN) {
            return "redirect:/admin/dashboard";
        } else if (role == Role.PROFESSIONAL) {
            return "redirect:/professional/dashboard";
        } else {
            return "redirect:/patient/dashboard";
        }
    }
}


-- Archivo: java\com\historias\clinicas\dao\UserDao.java 
package com.historias.clinicas.dao;

import com.historias.clinicas.entity.UserEntity;
import java.util.Optional;

public interface UserDao {
    Optional<UserEntity> findByUsername(String username);
    UserEntity save(UserEntity user);
}


-- Archivo: java\com\historias\clinicas\daoImpl\UserDaoImpl.java 
package com.historias.clinicas.daoImpl;

import com.historias.clinicas.dao.UserDao;
import com.historias.clinicas.entity.UserEntity;
import com.historias.clinicas.repositories.UserRepository;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;
import java.util.Optional;

@Repository @Transactional
public class UserDaoImpl implements UserDao {

    private final UserRepository repo;
    public UserDaoImpl(UserRepository repo) { this.repo = repo; }

    public Optional<UserEntity> findByUsername(String username) {
        return repo.findByUsername(username);
    }
    public UserEntity save(UserEntity u) { return repo.save(u); }
}


-- Archivo: java\com\historias\clinicas\entity\Admin.java 
// src/main/java/com/historias/clinicas/entity/Admin.java
package com.historias.clinicas.entity;

import jakarta.persistence.*;

@Entity
@Table(name = "admin")
public class Admin {

    @Id
    @Column(name = "user_id")
    private Integer userId;

    @MapsId
    @OneToOne(fetch = FetchType.LAZY, optional = false)
    @JoinColumn(name = "user_id")
    private UserEntity user;

    @Column(name = "is_primary", nullable = false)
    private boolean primaryAdmin = false;

    // CONSTRUCTORS
    public Admin() {}

    public Admin(UserEntity user, boolean primaryAdmin) {
        this.user = user;
        this.primaryAdmin = primaryAdmin;
    }

    // GETTERS & SETTERS
    public Integer getUserId() { return userId; }

    public UserEntity getUser() { return user; }
    public void setUser(UserEntity user) { this.user = user; }

    public boolean isPrimaryAdmin() { return primaryAdmin; }
    public void setPrimaryAdmin(boolean primaryAdmin) { this.primaryAdmin = primaryAdmin; }
}


-- Archivo: java\com\historias\clinicas\entity\Episode.java 
// src/main/java/com/historias/clinicas/entity/Episode.java
package com.historias.clinicas.entity;

import jakarta.persistence.*;
import java.time.LocalDateTime;

@Entity
@Table(name = "episode")
public class Episode {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer episodeId;

    @ManyToOne(optional = false)
    @JoinColumn(name = "patient_id")
    private Patient patient;

    @ManyToOne(optional = false)
    @JoinColumn(name = "prof_id")
    private Professional professional;

    @Column(nullable = false)
    private LocalDateTime dateIn;

    private LocalDateTime dateOut;

    // Getters y setters
    public Integer getEpisodeId() { return episodeId; }
    public void setEpisodeId(Integer episodeId) { this.episodeId = episodeId; }

    public Patient getPatient() { return patient; }
    public void setPatient(Patient patient) { this.patient = patient; }

    public Professional getProfessional() { return professional; }
    public void setProfessional(Professional professional) { this.professional = professional; }

    public LocalDateTime getDateIn() { return dateIn; }
    public void setDateIn(LocalDateTime dateIn) { this.dateIn = dateIn; }

    public LocalDateTime getDateOut() { return dateOut; }
    public void setDateOut(LocalDateTime dateOut) { this.dateOut = dateOut; }
}


-- Archivo: java\com\historias\clinicas\entity\Medication.java 
package com.historias.clinicas.entity;

import jakarta.persistence.*;

@Entity
@Table(name = "medication")
public class Medication {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer medicationId;

    @Column(nullable = false)
    private String name;

    private String form;
    private String concentration;

    // Getters y Setters
    public Integer getMedicationId() { return medicationId; }
    public void setMedicationId(Integer medicationId) { this.medicationId = medicationId; }

    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public String getForm() { return form; }
    public void setForm(String form) { this.form = form; }

    public String getConcentration() { return concentration; }
    public void setConcentration(String concentration) { this.concentration = concentration; }
}

-- Archivo: java\com\historias\clinicas\entity\Patient.java 
// src/main/java/com/historias/clinicas/entity/Patient.java
package com.historias.clinicas.entity;
import com.historias.clinicas.entity.enums.*;

import jakarta.persistence.*;

@Entity
@Table(name = "patient",
       uniqueConstraints = @UniqueConstraint(columnNames = {"doc_type","doc_number"}))
public class Patient {

    @Id
    @Column(name = "user_id")
    private Integer userId;

    @MapsId
    @OneToOne(fetch = FetchType.LAZY, optional = false)
    @JoinColumn(name = "user_id")
    private UserEntity user;

    @Enumerated(EnumType.STRING)
    @Column(name = "doc_type", nullable = false)
    private DocType docType;

    @Column(name = "doc_number", nullable = false, length = 20)
    private String docNumber;

    @Column(length = 200)
    private String address;

    // CONSTRUCTORS
    public Patient() {}

    public Patient(UserEntity user, DocType docType, String docNumber, String address) {
        this.user = user;
        this.docType = docType;
        this.docNumber = docNumber;
        this.address = address;
    }

    // GETTERS & SETTERS
    public Integer getUserId() { return userId; }

    public UserEntity getUser() { return user; }
    public void setUser(UserEntity user) { this.user = user; }

    public DocType getDocType() { return docType; }
    public void setDocType(DocType docType) { this.docType = docType; }

    public String getDocNumber() { return docNumber; }
    public void setDocNumber(String docNumber) { this.docNumber = docNumber; }

    public String getAddress() { return address; }
    public void setAddress(String address) { this.address = address; }
}


-- Archivo: java\com\historias\clinicas\entity\Prescription.java 
package com.historias.clinicas.entity;

import jakarta.persistence.*;
import java.time.LocalDateTime;

@Entity
@Table(name = "prescription")
public class Prescription {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer prescriptionId;

    @ManyToOne(optional = false)
    @JoinColumn(name = "episode_id")
    private Episode episode;

    @ManyToOne(optional = false)
    @JoinColumn(name = "medication_id")
    private Medication medication;

    @Column(nullable = false)
    private String dose;

    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private Route route;

    private String frequency;
    private LocalDateTime startDt;
    private LocalDateTime endDt;

    public enum Route { VO, IV, IM, SC, TOP }

    public Prescription() {
    }

    // --- Getters y setters ---

    public Integer getPrescriptionId() {
        return prescriptionId;
    }

    public void setPrescriptionId(Integer prescriptionId) {
        this.prescriptionId = prescriptionId;
    }

    public Episode getEpisode() {
        return episode;
    }

    public void setEpisode(Episode episode) {
        this.episode = episode;
    }

    public Medication getMedication() {
        return medication;
    }

    public void setMedication(Medication medication) {
        this.medication = medication;
    }

    public String getDose() {
        return dose;
    }

    public void setDose(String dose) {
        this.dose = dose;
    }

    public Route getRoute() {
        return route;
    }

    public void setRoute(Route route) {
        this.route = route;
    }

    public String getFrequency() {
        return frequency;
    }

    public void setFrequency(String frequency) {
        this.frequency = frequency;
    }

    public LocalDateTime getStartDt() {
        return startDt;
    }

    public void setStartDt(LocalDateTime startDt) {
        this.startDt = startDt;
    }

    public LocalDateTime getEndDt() {
        return endDt;
    }

    public void setEndDt(LocalDateTime endDt) {
        this.endDt = endDt;
    }
}


-- Archivo: java\com\historias\clinicas\entity\Professional.java 
// src/main/java/com/historias/clinicas/entity/Professional.java
package com.historias.clinicas.entity;

import jakarta.persistence.*;
import com.historias.clinicas.entity.enums.*;

@Entity
@Table(name = "professional")
public class Professional {

    @Id
    @Column(name = "user_id")
    private Integer userId;

    @MapsId
    @OneToOne(fetch = FetchType.LAZY, optional = false)
    @JoinColumn(name = "user_id")
    private UserEntity user;

    @Enumerated(EnumType.STRING)
    @Column(name = "prof_type", nullable = false)
    private ProfType profType;

    @Column(name = "license_number", nullable = false, unique = true, length = 50)
    private String licenseNumber;

    @Column(length = 120)
    private String specialty;

    // CONSTRUCTORS
    public Professional() {}

    public Professional(UserEntity user, ProfType profType, String licenseNumber, String specialty) {
        this.user = user;
        this.profType = profType;
        this.licenseNumber = licenseNumber;
        this.specialty = specialty;
    }

    // GETTERS & SETTERS
    public Integer getUserId() { return userId; }

    public UserEntity getUser() { return user; }
    public void setUser(UserEntity user) { this.user = user; }

    public ProfType getProfType() { return profType; }
    public void setProfType(ProfType profType) { this.profType = profType; }

    public String getLicenseNumber() { return licenseNumber; }
    public void setLicenseNumber(String licenseNumber) { this.licenseNumber = licenseNumber; }

    public String getSpecialty() { return specialty; }
    public void setSpecialty(String specialty) { this.specialty = specialty; }
}


-- Archivo: java\com\historias\clinicas\entity\UserEntity.java 
package com.historias.clinicas.entity;

import jakarta.persistence.*;
import java.time.*;
import com.historias.clinicas.entity.enums.*;

@Entity
@Table(name = "users")
public class UserEntity {

    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer userId;

    @Column(nullable = false, unique = true, length = 60)
    private String username;

    @Column(name = "hash_password", nullable = false, length = 512)
    private String hashPassword;

    @Column(name = "first_name", nullable = false, length = 80)
    private String firstName;

    @Column(name = "last_name", nullable = false, length = 80)
    private String lastName;

    @Enumerated(EnumType.STRING)
    private Sex sex;

    private LocalDate dateOfBirth;
    private String   phone;
    private String   email;

    @Column(nullable = false)
    private LocalDateTime createdAt = LocalDateTime.now();

    /* ----- constructores ----- */
    public UserEntity() {}

    public UserEntity(String username, String hashPwd,
                      String first,   String last,
                      Sex sex,        LocalDate dob,
                      String phone,   String email) {
        this.username     = username;
        this.hashPassword = hashPwd;
        this.firstName    = first;
        this.lastName     = last;
        this.sex          = sex;
        this.dateOfBirth  = dob;
        this.phone        = phone;
        this.email        = email;
    }

    /* ----- getters / setters ----- */
    public Integer getUserId()                  { return userId; }
    public void    setUserId(Integer id)        { this.userId = id; }

    public String  getUsername()                { return username; }
    public void    setUsername(String u)        { this.username = u; }

    public String  getHashPassword()            { return hashPassword; }
    public void    setHashPassword(String h)    { this.hashPassword = h; }

    public String  getFirstName()               { return firstName; }
    public void    setFirstName(String f)       { this.firstName = f; }

    public String  getLastName()                { return lastName; }
    public void    setLastName(String l)        { this.lastName = l; }

    public Sex     getSex()                     { return sex; }
    public void    setSex(Sex s)                { this.sex = s; }

    public LocalDate getDateOfBirth()           { return dateOfBirth; }
    public void      setDateOfBirth(LocalDate d){ this.dateOfBirth = d; }

    public String  getPhone()                   { return phone; }
    public void    setPhone(String p)           { this.phone = p; }

    public String  getEmail()                   { return email; }
    public void    setEmail(String e)           { this.email = e; }

    public LocalDateTime getCreatedAt()         { return createdAt; }
    public void          setCreatedAt(LocalDateTime t){ this.createdAt = t; }
}


-- Archivo: java\com\historias\clinicas\entity\enums\DocType.java 
package com.historias.clinicas.entity.enums;

public enum DocType {
	DNI, CE, PAS
}


-- Archivo: java\com\historias\clinicas\entity\enums\ProfType.java 
package com.historias.clinicas.entity.enums;

public enum ProfType {
	MEDICO, ENFERMERO
}


-- Archivo: java\com\historias\clinicas\entity\enums\Role.java 
package com.historias.clinicas.entity.enums;
public enum Role { ADMIN, PROFESSIONAL, PATIENT }


-- Archivo: java\com\historias\clinicas\entity\enums\Sex.java 
package com.historias.clinicas.entity.enums;
public enum Sex { M, F, O }


-- Archivo: java\com\historias\clinicas\general\PasswordUtil.java 
package com.historias.clinicas.general;

import org.mindrot.jbcrypt.BCrypt;

/** Helper estático para hashear y verificar contraseñas. */
public final class PasswordUtil {

    private PasswordUtil() {}

    /** Devuelve el hash de la contraseña en texto plano. */
    public static String hash(String plain) {
        return BCrypt.hashpw(plain, BCrypt.gensalt());
    }

    /** Verifica que la contraseña en texto plano coincida con el hash almacenado. */
    public static boolean verify(String plain, String hash) {
        return BCrypt.checkpw(plain, hash);
    }
}


-- Archivo: java\com\historias\clinicas\repositories\AdminRepository.java 
package com.historias.clinicas.repositories;

import com.historias.clinicas.entity.Admin;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;

public interface AdminRepository extends JpaRepository<Admin, Integer> {

    /** Devuelve el único administrador primario (si existe). */
    Optional<Admin> findByPrimaryAdminTrue();

    /** Comprueba si un usuario concreto es admin primario. */
    boolean existsByUserIdAndPrimaryAdminTrue(Integer userId);
}


-- Archivo: java\com\historias\clinicas\repositories\EpisodeRepository.java 
// src/main/java/com/historias/clinicas/repositories/EpisodeRepository.java
package com.historias.clinicas.repositories;

import com.historias.clinicas.entity.Episode;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.List;

public interface EpisodeRepository extends JpaRepository<Episode, Integer> {
    List<Episode> findByProfessionalUserUserIdAndDateOutIsNull(Integer profId);
    long countByDateOutIsNull();
}


-- Archivo: java\com\historias\clinicas\repositories\MedicationRepository.java 
package com.historias.clinicas.repositories;

import com.historias.clinicas.entity.Medication;
import org.springframework.data.jpa.repository.JpaRepository;

public interface MedicationRepository extends JpaRepository<Medication, Integer> { }

-- Archivo: java\com\historias\clinicas\repositories\PatientRepository.java 
package com.historias.clinicas.repositories;

import com.historias.clinicas.entity.Patient;
import org.springframework.data.jpa.repository.JpaRepository;

public interface PatientRepository extends JpaRepository<Patient, Integer> {}


-- Archivo: java\com\historias\clinicas\repositories\PrescriptionRepository.java 
package com.historias.clinicas.repositories;

import com.historias.clinicas.entity.Prescription;
import org.springframework.data.jpa.repository.JpaRepository;

public interface PrescriptionRepository extends JpaRepository<Prescription, Integer> { }

-- Archivo: java\com\historias\clinicas\repositories\ProfessionalRepository.java 
package com.historias.clinicas.repositories;

import com.historias.clinicas.entity.Professional;
import org.springframework.data.jpa.repository.JpaRepository;

public interface ProfessionalRepository extends JpaRepository<Professional, Integer> {}


-- Archivo: java\com\historias\clinicas\repositories\UserRepository.java 
package com.historias.clinicas.repositories;

import com.historias.clinicas.entity.UserEntity;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.Optional;

public interface UserRepository extends JpaRepository<UserEntity,Integer> {
    Optional<UserEntity> findByUsername(String username);
}


-- Archivo: java\com\historias\clinicas\security\AuthInterceptor.java 
package com.historias.clinicas.security;

import jakarta.servlet.http.*;
import org.springframework.web.servlet.HandlerInterceptor;

/** Interceptor que protege todas las rutas salvo /login, /logout y estáticos. */
public class AuthInterceptor implements HandlerInterceptor {

    private static final String[] PUBLIC = {
        "/login", "/logout", "/css/", "/js/", "/images/", "/h2-console"
    };

    private boolean isPublic(String path) {
        for (String p : PUBLIC) if (path.startsWith(p)) return true;
        return false;
    }

    @Override
    public boolean preHandle(HttpServletRequest req,
                             HttpServletResponse res,
                             Object handler) throws Exception {
        String ctx  = req.getContextPath();
        String path = req.getRequestURI().substring(ctx.length());

        if (isPublic(path)) return true;

        if (req.getSession().getAttribute("USER") == null) {
            res.sendRedirect(ctx + "/login?timeout");
            return false;
        }
        return true;
    }
}


-- Archivo: resources\application.properties 
# spring.application.name=historias-clinicas
# spring.mvc.view.prefix=/WEB-INF/jsp/
# spring.mvc.view.suffix=.jsp

spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.cache=false 


spring.datasource.url=jdbc:mysql://localhost:3306/medical_history?useSSL=false&serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=erickb25

spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

logging.level.org.springframework.web.servlet.view=DEBUG

# Habilita y forza UTF-8 en request y response


# Asegura que Thymeleaf/JSP tambi�n lo usen si aplica


-- Archivo: resources\templates\index.html 
<!-- templates/index.html -->
<!DOCTYPE html>
<html lang="es" xmlns:th="http://www.thymeleaf.org">
<head>
  <meta charset="UTF-8"/>
  <title>Historias Clínicas</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script>tailwind.config={theme:{extend:{colors:{brand:'#2563eb'}}}}</script>
</head>
<body class="bg-gray-50 min-h-screen flex items-center justify-center">
  <div class="bg-white p-8 rounded-2xl shadow-lg text-center max-w-md">
    <h1 class="text-4xl font-extrabold mb-4">Historias Clínicas</h1>
    <p class="text-lg text-gray-700 mb-6" th:text="${mensaje}">¡Bienvenido!</p>
    <a th:href="@{/login}" class="inline-block bg-brand hover:bg-blue-700 text-white font-semibold py-2 px-8 rounded-lg">
      Iniciar Sesión
    </a>
  </div>
</body>
</html>


-- Archivo: resources\templates\login.html 
<!-- templates/login.html -->
<!DOCTYPE html>
<html lang="es" xmlns:th="http://www.thymeleaf.org">
<head>
  <meta charset="UTF-8"/>
  <title>Iniciar Sesión · Historias Clínicas</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script>tailwind.config={theme:{extend:{colors:{brand:'#2563eb'}}}}</script>
</head>
<body class="bg-gray-100 min-h-screen flex items-center justify-center">
  <div class="bg-white p-8 rounded-2xl shadow-lg w-full max-w-sm">
    <h1 class="text-3xl font-bold text-center text-brand mb-6">Historias Clínicas</h1>
    <div th:if="${msg}" class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4" th:text="${msg}"></div>

    <form th:action="@{/login}" method="post" class="space-y-4">
      <div>
        <label class="block text-sm font-medium text-gray-600 mb-1">Usuario</label>
        <input name="username" required class="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-brand"/>
      </div>
      <div>
        <label class="block text-sm font-medium text-gray-600 mb-1">Contraseña</label>
        <input type="password" name="password" required class="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-brand"/>
      </div>
      <button type="submit" class="w-full bg-brand text-white font-semibold py-2 rounded-lg hover:bg-blue-700 transition">
        Iniciar sesion
      </button>
    </form>
  </div>
</body>
</html>


-- Archivo: resources\templates\admin\admin-form.html 
<!-- templates/admin/admin-form.html -->
<!DOCTYPE html>
<html xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout" layout:decorate="layouts/admin"
      xmlns:th="http://www.thymeleaf.org">
<head><title>Nuevo Administrador</title></head>
<body>
<div layout:fragment="content" th:with="page='admin/admins'">
  <h2 class="text-2xl font-bold mb-6">Nuevo administrador</h2>
  <div th:if="${error}" class="mb-4 text-red-600" th:text="${error}">Usuario ya existe</div>
  <form th:action="@{/admin/admins}" method="post" class="space-y-4 max-w-lg">
    <div><label class="block text-sm font-medium text-gray-700">Usuario</label>
         <input name="username" required class="mt-1 p-2 w-full rounded-lg border-gray-300 shadow-sm focus:ring-brand"/></div>
    <div><label class="block text-sm font-medium text-gray-700">Contraseña</label>
         <input type="password" name="password" required class="mt-1 p-2 w-full rounded-lg border-gray-300 shadow-sm focus:ring-brand"/></div>
    <div class="grid grid-cols-2 gap-4">
      <div><label class="block text-sm font-medium text-gray-700">Nombre</label>
           <input name="firstName" required class="mt-1 p-2 w-full rounded-lg border-gray-300 shadow-sm focus:ring-brand"/></div>
      <div><label class="block text-sm font-medium text-gray-700">Apellido</label>
           <input name="lastName" required class="mt-1 p-2 w-full rounded-lg border-gray-300 shadow-sm focus:ring-brand"/></div>
    </div>
    <div>
      <label class="block text-sm font-medium text-gray-700">Sexo</label>
      <select name="sex" class="mt-1 p-2 w-full rounded-lg border-gray-300 shadow-sm focus:ring-brand">
        <option th:each="s:${sexValues}" th:value="${s}" th:text="${s}"/>
      </select>
    </div>
    <button class="inline-flex items-center rounded-lg bg-brand px-6 py-2 text-white hover:bg-blue-700">Guardar</button>
  </form>
</div>
</body>
</html>


-- Archivo: resources\templates\admin\admins.html 
<!-- templates/admin/admins.html -->
<!DOCTYPE html>
<html xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout" layout:decorate="layouts/admin"
      xmlns:th="http://www.thymeleaf.org">
<head><title>Administradores</title></head>
<body>
<div layout:fragment="content" th:with="page='admin/admins'">
  <div class="flex items-center justify-between mb-6">
    <h2 class="text-2xl font-bold">Administradores</h2>
    <a th:href="@{/admin/admins/new}" class="inline-flex items-center rounded-lg bg-brand px-4 py-2 text-white hover:bg-blue-700">+ Nuevo</a>
  </div>
  <table class="min-w-full divide-y divide-gray-200 bg-white rounded-xl shadow overflow-hidden text-sm">
    <thead class="bg-gray-50"><tr>
      <th class="px-6 py-3 text-left font-medium text-gray-500 uppercase">ID</th>
      <th class="px-6 py-3 text-left font-medium text-gray-500 uppercase">Usuario</th>
      <th class="px-6 py-3 text-left font-medium text-gray-500 uppercase">Nombre</th>
      <th class="px-6 py-3 text-left font-medium text-gray-500 uppercase">Principal</th>
      <th class="px-6 py-3"></th>
    </tr></thead>
    <tbody class="divide-y divide-gray-200">
      <tr th:each="a : ${admins}" class="hover:bg-gray-50">
        <td class="px-6 py-4" th:text="${a.userId}"/>
        <td class="px-6 py-4" th:text="${a.user.username}"/>
        <td class="px-6 py-4" th:text="${a.user.firstName + ' ' + a.user.lastName}"/>
        <td class="px-6 py-4" th:text="${a.primaryAdmin}"/>
        <td class="px-6 py-4 text-right">
          <form th:if="${!a.primaryAdmin}" th:action="@{'/admin/admins/' + ${a.userId} + '/delete'}" method="post" class="inline">
            <button class="text-red-600 hover:text-red-800" onclick="return confirm('¿Eliminar?')">Eliminar</button>
          </form>
        </td>
      </tr>
    </tbody>
  </table>
</div>
</body>
</html>


-- Archivo: resources\templates\admin\dashboard.html 
<!-- templates/admin/dashboard.html -->
<!DOCTYPE html>
<html xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout" layout:decorate="layouts/admin"
      xmlns:th="http://www.thymeleaf.org">
<head><title>Dashboard</title></head>
<body>
<div layout:fragment="content" th:with="page='admin/dashboard'">
  <h2 class="text-3xl font-bold mb-6">¡Bienvenido, <span th:text="${user.firstName}"/>!</h2>
  <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
    <div class="bg-white rounded-xl shadow p-6">
      <p class="text-gray-500 text-sm">Profesionales</p>
      <p class="text-3xl font-bold" th:text="${prosCount}">0</p>
    </div>
    <div class="bg-white rounded-xl shadow p-6">
      <p class="text-gray-500 text-sm">Pacientes</p>
      <p class="text-3xl font-bold" th:text="${patientsCount}">0</p>
    </div>
    <div class="bg-white rounded-xl shadow p-6">
      <p class="text-gray-500 text-sm">Episodios abiertos</p>
      <p class="text-3xl font-bold" th:text="${openEpisodes}">0</p>
    </div>
  </div>
</div>
</body>
</html>


-- Archivo: resources\templates\admin\professional-form.html 
<!-- templates/admin/professional-form.html -->
<!DOCTYPE html>
<html xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout" layout:decorate="layouts/admin"
      xmlns:th="http://www.thymeleaf.org">
<head><title>Nuevo Profesional</title></head>
<body>
<div layout:fragment="content" th:with="page='admin/professionals'">
  <h2 class="text-2xl font-bold mb-6">Nuevo profesional</h2>
  <div th:if="${error}" class="mb-4 text-red-600" th:text="${error}"/>
  <form th:action="@{/admin/professionals}" method="post" class="space-y-4 max-w-lg">
    <div><label class="block text-sm font-medium text-gray-700">Usuario</label>
         <input name="username" required class="mt-1 p-2 w-full rounded-lg border-gray-300 shadow-sm focus:ring-brand"/></div>
    <div><label class="block text-sm font-medium text-gray-700">Contraseña</label>
         <input type="password" name="password" required class="mt-1 p-2 w-full rounded-lg border-gray-300 shadow-sm focus:ring-brand"/></div>
    <div class="grid grid-cols-2 gap-4">
      <div><label class="block text-sm font-medium text-gray-700">Nombre</label>
           <input name="firstName" required class="mt-1 p-2 w-full rounded-lg border-gray-300 shadow-sm focus:ring-brand"/></div>
      <div><label class="block text-sm font-medium text-gray-700">Apellido</label>
           <input name="lastName" required class="mt-1 p-2 w-full rounded-lg border-gray-300 shadow-sm focus:ring-brand"/></div>
    </div>
    <div>
      <label class="block text-sm font-medium text-gray-700">Sexo</label>
      <select name="sex" class="mt-1 p-2 w-full rounded-lg border-gray-300 shadow-sm focus:ring-brand">
        <option th:each="s:${sexValues}" th:value="${s}" th:text="${s}"/>
      </select>
    </div>
    <div class="grid grid-cols-2 gap-4">
      <div><label class="block text-sm font-medium text-gray-700">Tipo profesional</label>
        <select name="profType" class="mt-1 p-2 w-full rounded-lg border-gray-300 shadow-sm focus:ring-brand">
          <option th:each="t:${profTypes}" th:value="${t}" th:text="${t}"/>
        </select></div>
      <div><label class="block text-sm font-medium text-gray-700">Nº Licencia</label>
           <input name="licenseNumber" required class="mt-1 p-2 w-full rounded-lg border-gray-300 shadow-sm focus:ring-brand"/></div>
    </div>
    <div><label class="block text-sm font-medium text-gray-700">Especialidad (opcional)</label>
         <input name="specialty" class="mt-1 p-2 w-full rounded-lg border-gray-300 shadow-sm focus:ring-brand"/></div>
    <button class="inline-flex items-center rounded-lg bg-brand px-6 py-2 text-white hover:bg-blue-700">Guardar</button>
  </form>
</div>
</body>
</html>


-- Archivo: resources\templates\admin\professionals.html 
<!-- templates/admin/professionals.html -->
<!DOCTYPE html>
<html xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout" layout:decorate="layouts/admin"
      xmlns:th="http://www.thymeleaf.org">
<head><title>Profesionales</title></head>
<body>
<div layout:fragment="content" th:with="page='admin/professionals'">
  <div class="flex items-center justify-between mb-6">
    <h2 class="text-2xl font-bold">Profesionales</h2>
    <a th:href="@{/admin/professionals/new}" class="inline-flex items-center rounded-lg bg-brand px-4 py-2 text-white hover:bg-blue-700">+ Nuevo</a>
  </div>
  <table class="min-w-full divide-y divide-gray-200 bg-white rounded-xl shadow overflow-hidden text-sm">
    <thead class="bg-gray-50"><tr>
      <th class="px-6 py-3 text-left font-medium text-gray-500 uppercase">ID</th>
      <th class="px-6 py-3 text-left font-medium text-gray-500 uppercase">Usuario</th>
      <th class="px-6 py-3 text-left font-medium text-gray-500 uppercase">Nombre</th>
      <th class="px-6 py-3 text-left font-medium text-gray-500 uppercase">Tipo</th>
      <th class="px-6 py-3"></th>
    </tr></thead>
    <tbody class="divide-y divide-gray-200">
      <tr th:each="p:${pros}" class="hover:bg-gray-50">
        <td class="px-6 py-4" th:text="${p.userId}"/>
        <td class="px-6 py-4" th:text="${p.user.username}"/>
        <td class="px-6 py-4" th:text="${p.user.firstName + ' ' + p.user.lastName}"/>
        <td class="px-6 py-4" th:text="${p.profType}"/>
        <td class="px-6 py-4 text-right">
          <form th:action="@{'/admin/professionals/' + ${p.userId} + '/delete'}" method="post" class="inline">
            <button class="text-red-600 hover:text-red-800" onclick="return confirm('¿Eliminar?')">Eliminar</button>
          </form>
        </td>
      </tr>
    </tbody>
  </table>
</div>
</body>
</html>


-- Archivo: resources\templates\admin\profile_form.html 
<!DOCTYPE html>
<html xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout"
      layout:decorate="layouts/admin"
      xmlns:th="http://www.thymeleaf.org">
<head><title>Perfil Administrador</title></head>
<body><div layout:fragment="content" th:with="page='admin/profile'">
  <h2 class="text-2xl font-bold mb-6">Mi Perfil</h2>
  <form th:replace="~{patient/profile_form :: form}"></form> <!-- reutilizamos formulario -->
</div></body>
</html>


-- Archivo: resources\templates\layouts\admin.html 
<!-- src/main/resources/templates/layouts/admin.html -->
<!DOCTYPE html>
<html lang="es" xmlns:th="http://www.thymeleaf.org"
      xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout">
<head>
  <meta charset="UTF-8"/>
  <title layout:title-pattern="$CONTENT_TITLE · Historias Clínicas">Panel</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script>
    tailwind.config = {
      theme: { extend: { colors: { brand: '#2563eb' } } }
    };
  </script>
</head>

<!--  ⬇️  page nunca queda null  -->
<body class="h-full bg-gray-100 flex"
      th:with="role=${role}, page=${page}?:''">

  <!-- SIDEBAR -->
  <aside class="w-64 shrink-0 h-screen bg-white border-r border-gray-200 p-6 flex flex-col">
    <h1 class="text-2xl font-bold text-brand mb-8">
      Historias<br/>Clínicas
    </h1>

    <nav class="flex-1">
      <ul class="space-y-1">
        <li>
          <a th:href="@{/admin/dashboard}"
             th:classappend="${page=='admin/dashboard'}? 'font-semibold bg-gray-100' : ''"
             class="block rounded-lg px-3 py-2 hover:bg-gray-100">🏠 Dashboard</a>
        </li>

        <li>
          <a th:href="@{/admin/professionals}"
             th:classappend="${#strings.startsWith(page,'admin/professionals')}? 'font-semibold bg-gray-100' : ''"
             class="block rounded-lg px-3 py-2 hover:bg-gray-100">👩‍⚕️ Profesionales</a>
        </li>

        <li th:if="${role=='ADMIN_PRIMARY'}">
          <a th:href="@{/admin/admins}"
             th:classappend="${#strings.startsWith(page,'admin/admins')}? 'font-semibold bg-gray-100' : ''"
             class="block rounded-lg px-3 py-2 hover:bg-gray-100">👑 Administradores</a>
        </li>
      </ul>
    </nav>

    <a th:href="@{/profile/edit}"
       class="mt-4 inline-flex items-center justify-center rounded-lg bg-gray-200 px-4 py-2 text-gray-800">
      ✏️ Editar perfil
    </a>

    <a th:href="@{/logout}"
       class="mt-4 inline-flex items-center justify-center rounded-lg bg-red-500 hover:bg-red-600 text-white py-2 px-4">
      ➜ Cerrar sesión
    </a>
  </aside>

  <!-- CONTENT -->
  <main class="flex-1 overflow-y-auto p-8" layout:fragment="content"></main>
</body>
</html>


-- Archivo: resources\templates\layouts\user.html 
<!-- src/main/resources/templates/layouts/user.html -->
<!DOCTYPE html>
<html lang="es" xmlns:th="http://www.thymeleaf.org"
      xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout">
<head>
  <meta charset="UTF-8"/>
  <title layout:title-pattern="$CONTENT_TITLE · Historias Clínicas">Panel</title>

  <!-- Tailwind vía CDN -->
  <script src="https://cdn.tailwindcss.com"></script>
  <script>
    tailwind.config = {
      theme: { extend: { colors: { brand: '#2563eb' } } }
    };
  </script>
</head>

<!-- ──────────────────────────────────────────────────────────────
     • page        ⇒ nunca null  (vacío si no viene)
     • role        ⇒ enum en sesión  (ADMIN | PROFESSIONAL | PATIENT)
     • roleName    ⇒ texto cómodo para comparar en IFs
     • homePath    ⇒ “admin/dashboard”, “professional/dashboard”, …
   ────────────────────────────────────────────────────────────── -->
<body class="h-full bg-gray-100 flex"
      th:with="page=${page}?:'', role=${session.ROLE},
               roleName=${role != null}?role.name():'',
               homePath=${role != null}?(#strings.toLowerCase(role.name()) + '/dashboard') : ''">


  <!-- SIDEBAR -->
  <aside class="w-64 bg-white h-screen border-r p-6 flex flex-col">
    <h1 class="text-2xl font-bold text-brand mb-8">Historias Clínicas</h1>

    <nav class="flex-1">
      <ul class="space-y-1">
        <!-- DASHBOARD -->
        <li>
          <a th:href="@{/${homePath}}"
             th:classappend="${page=='dashboard'} ? 'font-semibold bg-gray-100' : ''"
             class="block px-3 py-2 rounded hover:bg-gray-100">🏠 Dashboard</a>
        </li>

        <!-- Opciones exclusivas para PROFESIONAL -->
        <li th:if="${roleName=='PROFESSIONAL'}">
          <a th:href="@{/professional/patients}"
             th:classappend="${#strings.startsWith(page,'patients')} ? 'font-semibold bg-gray-100' : ''"
             class="block px-3 py-2 rounded hover:bg-gray-100">🧑‍🤝‍🧑 Pacientes</a>
        </li>

        <li th:if="${roleName=='PROFESSIONAL'}">
          <a th:href="@{/professional/medications}"
             th:classappend="${#strings.startsWith(page,'medications')} ? 'font-semibold bg-gray-100' : ''"
             class="block px-3 py-2 rounded hover:bg-gray-100">💊 Medicaciones</a>
        </li>

        <!-- Futuras opciones para PACIENTE
        <li th:if="${roleName=='PATIENT'}">…</li>
        -->
      </ul>
    </nav>

    <!-- enlaces comunes -->
    <a th:href="@{/profile/edit}"
       class="mb-4 inline-flex items-center justify-center rounded-lg bg-gray-200 px-4 py-2 text-gray-800 hover:bg-gray-300">
      ✏️ Editar perfil
    </a>

    <a th:href="@{/logout}"
       class="inline-flex items-center justify-center rounded-lg bg-red-500 hover:bg-red-600 text-white py-2 px-4">
      ➜ Cerrar sesión
    </a>
  </aside>

  <!-- CONTENIDO -->
  <main class="flex-1 overflow-y-auto p-8" layout:fragment="content"></main>
</body>
</html>


-- Archivo: resources\templates\medications\form.html 
<!-- templates/medications/form.html -->
<!DOCTYPE html>
<html xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout" layout:decorate="layouts/user"
      xmlns:th="http://www.thymeleaf.org">
<head><title>Medicamento</title></head>
<body>
<div layout:fragment="content" th:with="page='medications'">
  <h2 class="text-2xl font-bold mb-4" th:text="${medication.medicationId==null ? 'Nuevo medicamento' : 'Editar medicamento'}">Form</h2>
  <form th:action="@{${medication.medicationId==null} ? '/professional/medications' : '/professional/medications/' + ${medication.medicationId} + '/edit'}"
        method="post" class="space-y-4 max-w-lg">
    <div><label class="block text-sm font-medium text-gray-700">Nombre</label>
         <input name="name" th:value="${medication.name}" required class="mt-1 p-2 w-full rounded-lg border-gray-300 shadow-sm focus:ring-brand"/></div>
    <div><label class="block text-sm font-medium text-gray-700">Forma</label>
         <input name="form" th:value="${medication.form}" class="mt-1 p-2 w-full rounded-lg border-gray-300 shadow-sm focus:ring-brand"/></div>
    <div><label class="block text-sm font-medium text-gray-700">Concentración</label>
         <input name="concentration" th:value="${medication.concentration}" class="mt-1 p-2 w-full rounded-lg border-gray-300 shadow-sm focus:ring-brand"/></div>
    <div class="text-right">
      <button class="inline-flex items-center rounded-lg bg-brand px-6 py-2 text-white hover:bg-blue-700">Guardar</button>
    </div>
  </form>
</div>
</body>
</html>


-- Archivo: resources\templates\medications\list.html 
<!-- templates/medications/list.html -->
<!DOCTYPE html>
<html xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout" layout:decorate="layouts/user"
      xmlns:th="http://www.thymeleaf.org">
<head><title>Medicaciones</title></head>
<body>
<div layout:fragment="content" th:with="page='medications'">
  <div class="flex items-center justify-between mb-6">
    <h2 class="text-2xl font-bold">Medicaciones Disponibles</h2>
    <a th:href="@{/professional/medications/new}" class="inline-flex items-center rounded-lg bg-brand px-4 py-2 text-white hover:bg-blue-700">+ Nuevo</a>
  </div>
  <table class="min-w-full divide-y divide-gray-200 bg-white rounded-xl shadow overflow-hidden text-sm">
    <thead class="bg-gray-50"><tr>
      <th class="px-6 py-3 text-left font-medium text-gray-500 uppercase">ID</th>
      <th class="px-6 py-3 text-left font-medium text-gray-500 uppercase">Nombre</th>
      <th class="px-6 py-3 text-left font-medium text-gray-500 uppercase">Forma</th>
      <th class="px-6 py-3 text-left font-medium text-gray-500 uppercase">Concentración</th>
      <th class="px-6 py-3"></th>
    </tr></thead>
    <tbody class="divide-y divide-gray-200">
      <tr th:each="m:${medications}" class="hover:bg-gray-50">
        <td class="px-6 py-4" th:text="${m.medicationId}"/>
        <td class="px-6 py-4" th:text="${m.name}"/>
        <td class="px-6 py-4" th:text="${m.form}"/>
        <td class="px-6 py-4" th:text="${m.concentration}"/>
        <td class="px-6 py-4 text-right space-x-2">
          <a th:href="@{'/professional/medications/' + ${m.medicationId} + '/edit'}"
             class="text-blue-600 hover:text-blue-800">Editar</a>
          <form th:action="@{'/professional/medications/' + ${m.medicationId} + '/delete'}" method="post" class="inline">
            <button onclick="return confirm('¿Eliminar?')" class="text-red-600 hover:text-red-800">Eliminar</button>
          </form>
        </td>
      </tr>
    </tbody>
  </table>
</div>
</body>
</html>


-- Archivo: resources\templates\medications\prescribe.html 
<!-- templates/medications/prescribe.html -->
<!DOCTYPE html>
<html xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout" layout:decorate="layouts/user"
      xmlns:th="http://www.thymeleaf.org">
<head><title>Prescribir Medicamento</title></head>
<body>
<div layout:fragment="content" th:with="page='medications'">
  <h2 class="text-2xl font-bold mb-6">Prescribir Medicamento</h2>
  <form th:action="@{/professional/medications/prescribe}" method="post" class="space-y-4 max-w-lg">
    <div>
      <label class="block text-sm font-medium text-gray-700">Episodio</label>
      <select name="episodeId" required class="mt-1 p-2 w-full rounded-lg border-gray-300 shadow-sm focus:ring-brand">
        <option th:each="e:${episodes}" th:value="${e.episodeId}"
                th:text="'#' + ${e.episodeId} + ' – ' + ${e.patient.user.firstName} + ' ' + ${e.patient.user.lastName}"/>
      </select>
    </div>
    <div>
      <label class="block text-sm font-medium text-gray-700">Medicamento</label>
      <select name="medicationId" required class="mt-1 p-2 w-full rounded-lg border-gray-300 shadow-sm focus:ring-brand">
        <option th:each="m:${medications}" th:value="${m.medicationId}" th:text="${m.name}"/>
      </select>
    </div>
    <div>
      <label class="block text-sm font-medium text-gray-700">Dosis</label>
      <input name="dose" required class="mt-1 p-2 w-full rounded-lg border-gray-300 shadow-sm focus:ring-brand"/>
    </div>
    <div>
      <label class="block text-sm font-medium text-gray-700">Vía</label>
      <select name="route" required class="mt-1 p-2 w-full rounded-lg border-gray-300 shadow-sm focus:ring-brand">
        <option th:each="r:${routes}" th:value="${r}" th:text="${r}"/>
      </select>
    </div>
    <div>
      <label class="block text-sm font-medium text-gray-700">Frecuencia (opcional)</label>
      <input name="frequency" class="mt-1 p-2 w-full rounded-lg border-gray-300 shadow-sm focus:ring-brand"/>
    </div>
    <button class="inline-flex items-center rounded-lg bg-brand px-6 py-2 text-white hover:bg-blue-700">Prescribir</button>
  </form>
</div>
</body>
</html>


-- Archivo: resources\templates\patient\dashboard.html 
<!DOCTYPE html>
<html xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout"
      layout:decorate="layouts/user"
      xmlns:th="http://www.thymeleaf.org">
<head><title>Dashboard Paciente</title></head>
<body>
<div layout:fragment="content" th:with="page='dashboard'">
  <h2 class="text-3xl font-bold mb-6">
    ¡Bienvenido,
    <span th:text="${user.firstName}"/> <span th:text="${user.lastName}"/>!
  </h2>

  <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
    <div class="bg-white p-6 rounded shadow">
      <p class="text-gray-600">Episodios abiertos</p>
      <p class="text-2xl font-semibold"
         th:text="${#numbers.formatInteger(activeEpisodes, 0)}">0</p>
    </div>
    <div class="bg-white p-6 rounded shadow">
      <p class="text-gray-600">Prescripciones vigentes</p>
      <p class="text-2xl font-semibold"
         th:text="${#numbers.formatInteger(prescriptionsCount, 0)}">0</p>
    </div>
  </div>
</div>
</body>
</html>


-- Archivo: resources\templates\patient\profile_form.html 
<!-- templates/patient/profile_form.html -->
<!DOCTYPE html>
<html xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout"
      layout:decorate="layouts/user"
      xmlns:th="http://www.thymeleaf.org">
<head>
  <title>Editar perfil</title>
</head>
<body>
<div layout:fragment="content" th:with="page='profile'">
  <h2 class="text-2xl font-bold mb-6">Editar Perfil</h2>

  <!-- ←—— ahora el fragmento se llama “form” ———→ -->
  <form th:fragment="form"
        th:action="@{/profile/edit}"
        method="post"
        class="space-y-4 max-w-lg">
    <div class="grid grid-cols-2 gap-4">
      <div>
        <label class="block text-sm font-medium text-gray-700">Nombre</label>
        <input name="firstName"
               th:value="${user.firstName}"
               required
               class="mt-1 p-2 w-full rounded-lg border-gray-300 shadow-sm focus:ring-brand"/>
      </div>
      <div>
        <label class="block text-sm font-medium text-gray-700">Apellido</label>
        <input name="lastName"
               th:value="${user.lastName}"
               required
               class="mt-1 p-2 w-full rounded-lg border-gray-300 shadow-sm focus:ring-brand"/>
      </div>
    </div>

    <div>
      <label class="block text-sm font-medium text-gray-700">Teléfono</label>
      <input name="phone"
             th:value="${user.phone}"
             class="mt-1 p-2 w-full rounded-lg border-gray-300 shadow-sm focus:ring-brand"/>
    </div>

    <div>
      <label class="block text-sm font-medium text-gray-700">Correo</label>
      <input name="email"
             type="email"
             th:value="${user.email}"
             class="mt-1 p-2 w-full rounded-lg border-gray-300 shadow-sm focus:ring-brand"/>
    </div>

    <div>
      <label class="block text-sm font-medium text-gray-700">Nueva contraseña (opcional)</label>
      <input name="password"
             type="password"
             class="mt-1 p-2 w-full rounded-lg border-gray-300 shadow-sm focus:ring-brand"/>
    </div>

    <button class="inline-flex items-center rounded-lg bg-brand px-6 py-2 text-white hover:bg-blue-700">
      Guardar cambios
    </button>
  </form>
</div>
</body>
</html>


-- Archivo: resources\templates\professional\dashboard.html 
<!-- templates/professional/dashboard.html -->
<!DOCTYPE html>
<html xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout" layout:decorate="layouts/user"
      xmlns:th="http://www.thymeleaf.org">
<head><title>Dashboard Profesional</title></head>
<body>
<div layout:fragment="content" th:with="page='dashboard'">
  <h2 class="text-3xl font-bold mb-6">¡Bienvenido, 
      <span th:text="${user.firstName}"/> <span th:text="${user.lastName}"/>!</h2>
  <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
    <div class="bg-white p-6 rounded shadow">
      <p class="text-gray-600">Pacientes registrados</p>
      <p class="text-2xl font-semibold" th:text="${patientsCount}">0</p>
    </div>
    <div class="bg-white p-6 rounded shadow">
      <p class="text-gray-600">Episodios activos</p>
      <p class="text-2xl font-semibold" th:text="${activeEpisodes}">0</p>
    </div>
  </div>
</div>
</body>
</html>


-- Archivo: resources\templates\professional\patient-form.html 
<!-- templates/professional/patient-form.html -->
<!DOCTYPE html>
<html xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout" layout:decorate="layouts/user"
      xmlns:th="http://www.thymeleaf.org">
<head><title>Paciente</title></head>
<body>
<div layout:fragment="content" th:with="page='patients'">
  <h2 class="text-2xl font-bold mb-6" th:text="${patient.userId==null ? 'Nuevo paciente' : 'Editar paciente'}">Formulario</h2>
  <div th:if="${error}" class="text-red-600 mb-4" th:text="${error}"></div>

  <form th:action="@{${patient.userId==null} ? '/professional/patients' : '/professional/patients/' + ${patient.userId} + '/edit'}"
        method="post" class="space-y-4 max-w-lg">
    <div th:if="${patient.userId==null}">
      <label class="block text-sm font-medium text-gray-700">Usuario</label>
      <input name="username" required class="mt-1 p-2 w-full rounded-lg border-gray-300 shadow-sm focus:ring-brand"/>
    </div>
    <div th:if="${patient.userId==null}">
      <label class="block text-sm font-medium text-gray-700">Contraseña</label>
      <input type="password" name="password" required class="mt-1 p-2 w-full rounded-lg border-gray-300 shadow-sm focus:ring-brand"/>
    </div>

    <div>
      <label class="block text-sm font-medium text-gray-700">Tipo de documento</label>
      <select name="docType" required class="mt-1 p-2 w-full rounded-lg border-gray-300 shadow-sm focus:ring-brand">
        <option th:each="d:${docTypes}" th:value="${d}" th:text="${d}"
                th:selected="${d==patient.docType}"/>
      </select>
    </div>

    <div>
      <label class="block text-sm font-medium text-gray-700">Número de documento</label>
      <input name="docNumber" th:value="${patient.docNumber}" required class="mt-1 p-2 w-full rounded-lg border-gray-300 shadow-sm focus:ring-brand"/>
    </div>

    <div class="grid grid-cols-2 gap-4">
      <div><label class="block text-sm font-medium text-gray-700">Nombre</label>
           <input name="firstName" th:value="${patient.user.firstName}" required class="mt-1 p-2 w-full rounded-lg border-gray-300 shadow-sm focus:ring-brand"/></div>
      <div><label class="block text-sm font-medium text-gray-700">Apellido</label>
           <input name="lastName" th:value="${patient.user.lastName}" required class="mt-1 p-2 w-full rounded-lg border-gray-300 shadow-sm focus:ring-brand"/></div>
    </div>

    <div>
      <label class="block text-sm font-medium text-gray-700">Dirección / Historial</label>
      <input name="address" th:value="${patient.address}" class="mt-1 p-2 w-full rounded-lg border-gray-300 shadow-sm focus:ring-brand"/>
    </div>

    <div class="text-right">
      <button class="inline-flex items-center rounded-lg bg-brand px-6 py-2 text-white hover:bg-blue-700">Guardar</button>
    </div>
  </form>
</div>
</body>
</html>


-- Archivo: resources\templates\professional\patients.html 
<!-- templates/professional/patients.html -->
<!DOCTYPE html>
<html xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout" layout:decorate="layouts/user"
      xmlns:th="http://www.thymeleaf.org">
<head><title>Pacientes</title></head>
<body>
<div layout:fragment="content" th:with="page='patients'">
  <div class="flex items-center justify-between mb-6">
    <h2 class="text-2xl font-bold">Pacientes</h2>
    <a th:href="@{/professional/patients/new}" class="inline-flex items-center rounded-lg bg-brand px-4 py-2 text-white hover:bg-blue-700">+ Nuevo</a>
  </div>
  <table class="min-w-full divide-y divide-gray-200 bg-white rounded-xl shadow overflow-hidden text-sm">
    <thead class="bg-gray-50"><tr>
      <th class="px-6 py-3 text-left font-medium text-gray-500 uppercase">ID</th>
      <th class="px-6 py-3 text-left font-medium text-gray-500 uppercase">Documento</th>
      <th class="px-6 py-3 text-left font-medium text-gray-500 uppercase">Nombre</th>
      <th class="px-6 py-3 text-left font-medium text-gray-500 uppercase">Dirección</th>
      <th class="px-6 py-3"></th></tr></thead>
    <tbody class="divide-y divide-gray-200">
      <tr th:each="p:${patients}" class="hover:bg-gray-50">
        <td class="px-6 py-4" th:text="${p.userId}"/>
        <td class="px-6 py-4" th:text="${p.docType + ' - ' + p.docNumber}"/>
        <td class="px-6 py-4" th:text="${p.user.firstName + ' ' + p.user.lastName}"/>
        <td class="px-6 py-4" th:text="${p.address}"/>
        <td class="px-6 py-4 text-right">
          <a th:href="@{'/professional/patients/' + ${p.userId} + '/edit'}"
             class="text-blue-600 hover:text-blue-800 mr-4">Editar</a>
          <form th:action="@{'/professional/patients/' + ${p.userId} + '/delete'}" method="post" class="inline">
            <button onclick="return confirm('¿Eliminar?')" class="text-red-600 hover:text-red-800">Eliminar</button>
          </form>
        </td>
      </tr>
    </tbody>
  </table>
</div>
</body>
</html>


-- Archivo: resources\templates\professional\profile_form.html 
<!DOCTYPE html>
<html xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout"
      layout:decorate="layouts/user"
      xmlns:th="http://www.thymeleaf.org">
<head><title>Perfil Profesional</title></head>
<body><div layout:fragment="content" th:with="page='profile'">
  <h2 class="text-2xl font-bold mb-6">Mi Perfil</h2>
  <form th:replace="~{patient/profile_form :: form}"></form>
</div></body>
</html>
